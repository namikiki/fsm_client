// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fsm_client/pkg/ent/predicate"
	"fsm_client/pkg/ent/synctask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SyncTaskUpdate is the builder for updating SyncTask entities.
type SyncTaskUpdate struct {
	config
	hooks    []Hook
	mutation *SyncTaskMutation
}

// Where appends a list predicates to the SyncTaskUpdate builder.
func (stu *SyncTaskUpdate) Where(ps ...predicate.SyncTask) *SyncTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUserID sets the "user_id" field.
func (stu *SyncTaskUpdate) SetUserID(s string) *SyncTaskUpdate {
	stu.mutation.SetUserID(s)
	return stu
}

// SetType sets the "type" field.
func (stu *SyncTaskUpdate) SetType(s string) *SyncTaskUpdate {
	stu.mutation.SetType(s)
	return stu
}

// SetName sets the "name" field.
func (stu *SyncTaskUpdate) SetName(s string) *SyncTaskUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetRootDir sets the "root_dir" field.
func (stu *SyncTaskUpdate) SetRootDir(s string) *SyncTaskUpdate {
	stu.mutation.SetRootDir(s)
	return stu
}

// SetIgnore sets the "ignore" field.
func (stu *SyncTaskUpdate) SetIgnore(b bool) *SyncTaskUpdate {
	stu.mutation.SetIgnore(b)
	return stu
}

// SetDeleted sets the "deleted" field.
func (stu *SyncTaskUpdate) SetDeleted(b bool) *SyncTaskUpdate {
	stu.mutation.SetDeleted(b)
	return stu
}

// SetStatus sets the "status" field.
func (stu *SyncTaskUpdate) SetStatus(s string) *SyncTaskUpdate {
	stu.mutation.SetStatus(s)
	return stu
}

// SetCreateTime sets the "create_time" field.
func (stu *SyncTaskUpdate) SetCreateTime(i int64) *SyncTaskUpdate {
	stu.mutation.ResetCreateTime()
	stu.mutation.SetCreateTime(i)
	return stu
}

// AddCreateTime adds i to the "create_time" field.
func (stu *SyncTaskUpdate) AddCreateTime(i int64) *SyncTaskUpdate {
	stu.mutation.AddCreateTime(i)
	return stu
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stu *SyncTaskUpdate) Mutation() *SyncTaskMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SyncTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SyncTaskMutation](ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SyncTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SyncTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SyncTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SyncTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(synctask.Table, synctask.Columns, sqlgraph.NewFieldSpec(synctask.FieldID, field.TypeString))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UserID(); ok {
		_spec.SetField(synctask.FieldUserID, field.TypeString, value)
	}
	if value, ok := stu.mutation.GetType(); ok {
		_spec.SetField(synctask.FieldType, field.TypeString, value)
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.SetField(synctask.FieldName, field.TypeString, value)
	}
	if value, ok := stu.mutation.RootDir(); ok {
		_spec.SetField(synctask.FieldRootDir, field.TypeString, value)
	}
	if value, ok := stu.mutation.Ignore(); ok {
		_spec.SetField(synctask.FieldIgnore, field.TypeBool, value)
	}
	if value, ok := stu.mutation.Deleted(); ok {
		_spec.SetField(synctask.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.SetField(synctask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stu.mutation.CreateTime(); ok {
		_spec.SetField(synctask.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := stu.mutation.AddedCreateTime(); ok {
		_spec.AddField(synctask.FieldCreateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SyncTaskUpdateOne is the builder for updating a single SyncTask entity.
type SyncTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SyncTaskMutation
}

// SetUserID sets the "user_id" field.
func (stuo *SyncTaskUpdateOne) SetUserID(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetUserID(s)
	return stuo
}

// SetType sets the "type" field.
func (stuo *SyncTaskUpdateOne) SetType(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetType(s)
	return stuo
}

// SetName sets the "name" field.
func (stuo *SyncTaskUpdateOne) SetName(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetRootDir sets the "root_dir" field.
func (stuo *SyncTaskUpdateOne) SetRootDir(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetRootDir(s)
	return stuo
}

// SetIgnore sets the "ignore" field.
func (stuo *SyncTaskUpdateOne) SetIgnore(b bool) *SyncTaskUpdateOne {
	stuo.mutation.SetIgnore(b)
	return stuo
}

// SetDeleted sets the "deleted" field.
func (stuo *SyncTaskUpdateOne) SetDeleted(b bool) *SyncTaskUpdateOne {
	stuo.mutation.SetDeleted(b)
	return stuo
}

// SetStatus sets the "status" field.
func (stuo *SyncTaskUpdateOne) SetStatus(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetStatus(s)
	return stuo
}

// SetCreateTime sets the "create_time" field.
func (stuo *SyncTaskUpdateOne) SetCreateTime(i int64) *SyncTaskUpdateOne {
	stuo.mutation.ResetCreateTime()
	stuo.mutation.SetCreateTime(i)
	return stuo
}

// AddCreateTime adds i to the "create_time" field.
func (stuo *SyncTaskUpdateOne) AddCreateTime(i int64) *SyncTaskUpdateOne {
	stuo.mutation.AddCreateTime(i)
	return stuo
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stuo *SyncTaskUpdateOne) Mutation() *SyncTaskMutation {
	return stuo.mutation
}

// Where appends a list predicates to the SyncTaskUpdate builder.
func (stuo *SyncTaskUpdateOne) Where(ps ...predicate.SyncTask) *SyncTaskUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SyncTaskUpdateOne) Select(field string, fields ...string) *SyncTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SyncTask entity.
func (stuo *SyncTaskUpdateOne) Save(ctx context.Context) (*SyncTask, error) {
	return withHooks[*SyncTask, SyncTaskMutation](ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SyncTaskUpdateOne) SaveX(ctx context.Context) *SyncTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SyncTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SyncTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SyncTaskUpdateOne) sqlSave(ctx context.Context) (_node *SyncTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(synctask.Table, synctask.Columns, sqlgraph.NewFieldSpec(synctask.FieldID, field.TypeString))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, synctask.FieldID)
		for _, f := range fields {
			if !synctask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != synctask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UserID(); ok {
		_spec.SetField(synctask.FieldUserID, field.TypeString, value)
	}
	if value, ok := stuo.mutation.GetType(); ok {
		_spec.SetField(synctask.FieldType, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.SetField(synctask.FieldName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.RootDir(); ok {
		_spec.SetField(synctask.FieldRootDir, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Ignore(); ok {
		_spec.SetField(synctask.FieldIgnore, field.TypeBool, value)
	}
	if value, ok := stuo.mutation.Deleted(); ok {
		_spec.SetField(synctask.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.SetField(synctask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stuo.mutation.CreateTime(); ok {
		_spec.SetField(synctask.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := stuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(synctask.FieldCreateTime, field.TypeInt64, value)
	}
	_node = &SyncTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
