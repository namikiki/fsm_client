// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fsm_client/pkg/ent/synctask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SyncTaskCreate is the builder for creating a SyncTask entity.
type SyncTaskCreate struct {
	config
	mutation *SyncTaskMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (stc *SyncTaskCreate) SetUserID(s string) *SyncTaskCreate {
	stc.mutation.SetUserID(s)
	return stc
}

// SetType sets the "type" field.
func (stc *SyncTaskCreate) SetType(s string) *SyncTaskCreate {
	stc.mutation.SetType(s)
	return stc
}

// SetName sets the "name" field.
func (stc *SyncTaskCreate) SetName(s string) *SyncTaskCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetRootDir sets the "root_dir" field.
func (stc *SyncTaskCreate) SetRootDir(s string) *SyncTaskCreate {
	stc.mutation.SetRootDir(s)
	return stc
}

// SetDeleted sets the "deleted" field.
func (stc *SyncTaskCreate) SetDeleted(b bool) *SyncTaskCreate {
	stc.mutation.SetDeleted(b)
	return stc
}

// SetCreateTime sets the "create_time" field.
func (stc *SyncTaskCreate) SetCreateTime(t time.Time) *SyncTaskCreate {
	stc.mutation.SetCreateTime(t)
	return stc
}

// SetID sets the "id" field.
func (stc *SyncTaskCreate) SetID(s string) *SyncTaskCreate {
	stc.mutation.SetID(s)
	return stc
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stc *SyncTaskCreate) Mutation() *SyncTaskMutation {
	return stc.mutation
}

// Save creates the SyncTask in the database.
func (stc *SyncTaskCreate) Save(ctx context.Context) (*SyncTask, error) {
	return withHooks[*SyncTask, SyncTaskMutation](ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SyncTaskCreate) SaveX(ctx context.Context) *SyncTask {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SyncTaskCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SyncTaskCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SyncTaskCreate) check() error {
	if _, ok := stc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "SyncTask.user_id"`)}
	}
	if _, ok := stc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SyncTask.type"`)}
	}
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SyncTask.name"`)}
	}
	if _, ok := stc.mutation.RootDir(); !ok {
		return &ValidationError{Name: "root_dir", err: errors.New(`ent: missing required field "SyncTask.root_dir"`)}
	}
	if _, ok := stc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "SyncTask.deleted"`)}
	}
	if _, ok := stc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SyncTask.create_time"`)}
	}
	return nil
}

func (stc *SyncTaskCreate) sqlSave(ctx context.Context) (*SyncTask, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SyncTask.ID type: %T", _spec.ID.Value)
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SyncTaskCreate) createSpec() (*SyncTask, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncTask{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(synctask.Table, sqlgraph.NewFieldSpec(synctask.FieldID, field.TypeString))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.UserID(); ok {
		_spec.SetField(synctask.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := stc.mutation.GetType(); ok {
		_spec.SetField(synctask.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(synctask.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.RootDir(); ok {
		_spec.SetField(synctask.FieldRootDir, field.TypeString, value)
		_node.RootDir = value
	}
	if value, ok := stc.mutation.Deleted(); ok {
		_spec.SetField(synctask.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := stc.mutation.CreateTime(); ok {
		_spec.SetField(synctask.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// SyncTaskCreateBulk is the builder for creating many SyncTask entities in bulk.
type SyncTaskCreateBulk struct {
	config
	builders []*SyncTaskCreate
}

// Save creates the SyncTask entities in the database.
func (stcb *SyncTaskCreateBulk) Save(ctx context.Context) ([]*SyncTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SyncTask, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SyncTaskCreateBulk) SaveX(ctx context.Context) []*SyncTask {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SyncTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SyncTaskCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
